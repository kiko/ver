h1. VER Roadmap

This roadmap is not sorted in order of importance, it's more like a verbose
todo- and wish-list.

Features should be removed once they are implemented.

If you have any non-trivial bugs or ideas, add them here.

h2. Sessions

Storing the current state of VER on disk for next startup.
Possible naming sessions? default names could be generated from CLI arguments,
so if you use `ver foo.rb` the session is called 'foo.rb'.
We should store the currently open buffers, the mode that they are in, the
insert mark position, and anything else we might come up with later.

h2. VCS integration

Mostly shortcuts for various source control systems.
These could simply open a terminal and execute a command.
Example can be the git plugin.

h2. org-mode / remember

Something to get things done and be reminded of them.

h2. Code folding

Exapnd sections of code, we can start out by the folding rules specified by the
tm bundle preferences.
Eventually this would be useful for other things like Viki.

h2. Notebook tabs

Using ttk::notebook we could implement tabs instead of the tiling view, or
combine the two.

We did that, but that's not very useful without the ability to see more than one
tab at a time.
Next idea is to have a layout that provides a list of notebooks and assigns a
view to one of them based on some heuristic.
Then we can wrap all of that into a tiling layout.
Keybindings for that should be fun... we can use awesome as reference.

h2. Markdown

The current tm syntax simply doesn't compile to a clean oniguruma regexp, try to
fix it.

h2. Dictionary

Looking up dictionaries... translation.
Maybe using something like google translate API when online?

h2. Support mirror and mirror transformation for snippets

The most powerful snipets are using mirror and mirror transformations.
In order to provide full support, we need to implement that.

h2. Improve integration of scope selectors and bundles

Right now we are doing a very simple matching of scope selectors, just to get
things started.
I'd like to improve on that by applying correct precedence for matching scopes.

h2. Improve integration of Bundles

Allowing bundles to bind keychains to commands.
Might be problematic, as the keychains are specific for the TM environment, so
it's very OSX specific and will conflict with e.g. emacs or vim keymaps.

Maybe we need a separate TM keymap and define a common prefix to the keychains
in other keymaps.

h2. Update keymaps

All the keymaps (apart from vim) need to be fixed to match current major/minor
mode structure.

h2. Move queries to the global VER status

The current text status should be more flexible than a simple Entry and it can
be confusing to be asked for entry in different locations.
By doing this, we can insert custom widgets into the text status.
Both vim and emacs do it this way, and it seems to work fine.

h2. Add specs

We should add specs for as many things as possible.

h2. Help system

Using YARD, we could nicely present documentation for every constant and method
with intelligent linking between them.

bc.. # a short example of how to access YARD docs.
require 'yard'
YARD::Registry.load_yardoc
YARD::Registry.at('VER').docstring
# "This is the doc for VER"

p. Of course we need to make browsing better than the current HTML browsers.

h2. Better tiling through panedwindow

Kiko said that he would like to change the size of buffers on both sides.
Using ttk::panedwindow instead of our current tiling algorithm could be a cheap
and good way to do this.

This means a horizontal pane owning two panes (for vertical tiling), one for
masters, the other for slaves.
The two inner panes own the views.
Now you can easily change both the horizontal and vertical size of each view but
keep the benefits of automatic tiling without any complex math on our part.
The hardest task is to make sure we carefully move the views between
panedwindows, but that's hardly more difficult than our current approach.

bc.. The idea is to use a layout like this:

+--------------------+
|       pane         |
|+--------++--------+|
||  pane  ||  pane  ||
||+------+||+------+||
||| view |||| view |||
|||      ||||      |||
|||      |||+------+||
|||      |||| view |||
|||      ||||      |||
||+------+||+------+||
|+--------++--------+|
+--------------------+
